Script started on Wed 30 Sep 2020 01:59:59 PM CDT
[01;32myingj4@acadia[00m:[01;34m/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/test/benchmarks/audioEncodingNoPara[00m$ make TARGET=seq
mkdir -p build/seq
/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/bin/clang -O1 -std=c++14 -Wall -fPIC -I./include -DDEVICE=CPU_TARGET -I./libspatialaudio/build/Debug/include -emit-llvm -S -o build/seq/main.ll src//main.cpp
/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/bin/opt -load LLVMGenHPVM.so -genhpvm -globaldce build/seq/main.ll -S -o build/seq/main.hpvm.ll
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @normalization_fxp(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %5 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !4
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %5, i64 0, i32 5
  %6 = load float, float* %amp, align 4, !tbaa !8
  %conv7 = fpext float %6 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %7 = load i16, i16* %arrayidx, align 2, !tbaa !12
  %conv9 = sitofp i16 %7 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !4
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !4
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !8
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !12
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !4
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @wrapperNormalization_fxp(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readnone) #6 {
entry:
  %normalization_fxp_cloned.node = call i8* @llvm.hpvm.createNode2D(i8* bitcast (%struct.out.normalization_fxp (%"class.std::vector.6"*, i64, i64, i64, i16*)* @normalization_fxp_cloned to i8*), i64 %3, i64 %2)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 4, i32 4, i1 false)
  call void @llvm.hpvm.bind.output(i8* %normalization_fxp_cloned.node, i32 0, i32 0, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readnone %sampleTemp) #6 {
entry:
  %normalization_fxp_cloned.node = call i8* @llvm.hpvm.createNode2D(i8* bitcast (%struct.out.normalization_fxp (%"class.std::vector.6"*, i64, i64, i64, i16*)* @normalization_fxp_cloned to i8*), i64 %soundSrcsSize, i64 %nSamples)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %normalization_fxp_cloned.node, i32 4, i32 4, i1 false)
  call void @llvm.hpvm.bind.output(i8* %normalization_fxp_cloned.node, i32 0, i32 0, i1 false)
  ret void
}
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @encoder_fxp(%"class.std::vector.6"* in out, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %4 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !6
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %4, i64 0, i32 3
  %5 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !10
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %6 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !6
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %6, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %7 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !6
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %7, i64 0, i32 2
  %8 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %5, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %8)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !6
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !10
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !6
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !6
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @wrapperEncoder_fxp(%"class.std::vector.6"* in out, i64, i64, i64) #6 {
entry:
  %encoder_fxp_cloned.node = call i8* @llvm.hpvm.createNode1D(i8* bitcast (%struct.out.encoder_fxp (%"class.std::vector.6"*, i64, i64, i64)* @encoder_fxp_cloned to i8*), i64 %3)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.output(i8* %encoder_fxp_cloned.node, i32 0, i32 0, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize) #6 {
entry:
  %encoder_fxp_cloned.node = call i8* @llvm.hpvm.createNode1D(i8* bitcast (%struct.out.encoder_fxp (%"class.std::vector.6"*, i64, i64, i64)* @encoder_fxp_cloned to i8*), i64 %soundSrcsSize)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %encoder_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.output(i8* %encoder_fxp_cloned.node, i32 0, i32 0, i1 false)
  ret void
}
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @sumBF_fxp(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %5 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !9
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %5, i64 0, i32 2
  %6 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !13
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %6)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !9
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !13
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @wrapperSumBF_fxp(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64) #6 {
entry:
  %sumBF_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%emptyStruct (%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64)* @sumBF_fxp_cloned to i8*))
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 4, i32 4, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define %emptyStruct.33 @wrapperSumBF_fxp_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize) #6 {
entry:
  %sumBF_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%emptyStruct (%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64)* @sumBF_fxp_cloned to i8*))
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %sumBF_fxp_cloned.node, i32 4, i32 4, i1 false)
  ret void
}
<insert name of the function>hehe
; Function Attrs: nounwind uwtable
define void @encoderPipeline(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readnone, %class.CBFormat* in out, i64) #6 {
entry:
  %wrapperNormalization_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%struct.out.wrapperNormalization_fxp (%"class.std::vector.6"*, i64, i64, i64, i16*)* @wrapperNormalization_fxp_cloned to i8*))
  %wrapperEncoder_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%struct.out.wrapperEncoder_fxp (%"class.std::vector.6"*, i64, i64, i64)* @wrapperEncoder_fxp_cloned to i8*))
  %wrapperSumBF_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%emptyStruct.33 (%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64)* @wrapperSumBF_fxp_cloned to i8*))
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 4, i32 4, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperEncoder_fxp_cloned.node, i32 0, i32 0, i1 false)
  %output = call i8* @llvm.hpvm.createEdge(i8* %wrapperNormalization_fxp_cloned.node, i8* %wrapperEncoder_fxp_cloned.node, i1 true, i32 0, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperEncoder_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperEncoder_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 0, i32 0, i1 false)
  %output1 = call i8* @llvm.hpvm.createEdge(i8* %wrapperEncoder_fxp_cloned.node, i8* %wrapperSumBF_fxp_cloned.node, i1 true, i32 0, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 5, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 6, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 3, i32 4, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define %emptyStruct.34 @encoderPipeline_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readnone %sampleTemp, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF) #6 {
entry:
  %wrapperNormalization_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%struct.out.wrapperNormalization_fxp (%"class.std::vector.6"*, i64, i64, i64, i16*)* @wrapperNormalization_fxp_cloned to i8*))
  %wrapperEncoder_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%struct.out.wrapperEncoder_fxp (%"class.std::vector.6"*, i64, i64, i64)* @wrapperEncoder_fxp_cloned to i8*))
  %wrapperSumBF_fxp_cloned.node = call i8* @llvm.hpvm.createNode(i8* bitcast (%emptyStruct.33 (%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64)* @wrapperSumBF_fxp_cloned to i8*))
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 0, i32 0, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 1, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperNormalization_fxp_cloned.node, i32 4, i32 4, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperEncoder_fxp_cloned.node, i32 0, i32 0, i1 false)
  %output = call i8* @llvm.hpvm.createEdge(i8* %wrapperNormalization_fxp_cloned.node, i8* %wrapperEncoder_fxp_cloned.node, i1 true, i32 0, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperEncoder_fxp_cloned.node, i32 2, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperEncoder_fxp_cloned.node, i32 3, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 0, i32 0, i1 false)
  %output1 = call i8* @llvm.hpvm.createEdge(i8* %wrapperEncoder_fxp_cloned.node, i8* %wrapperSumBF_fxp_cloned.node, i1 true, i32 0, i32 1, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 5, i32 2, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 6, i32 3, i1 false)
  call void @llvm.hpvm.bind.input(i8* %wrapperSumBF_fxp_cloned.node, i32 3, i32 4, i1 false)
  ret void
}
/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/bin/opt -load LLVMBuildDFG.so -load LLVMDFG2LLVM_CPU.so -load LLVMClearDFG.so -dfg2llvm-cpu -clearDFG -S build/seq/main.hpvm.ll -o build/seq/audioEncoding-seq.host.ll
Writing '/tmp/DataflowGraph-e5251d.dot'...  done. 
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %5 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %5, i64 0, i32 5
  %6 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %6 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %7 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %7 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp, i64 %idx_x) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly, i64) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %6 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %6, i64 0, i32 5
  %7 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %7 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %8 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %8 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %9 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %9, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp, i64 %idx_x, i64 %idx_y) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly, i64, i64) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %7 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %7, i64 0, i32 5
  %8 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %8 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %9 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %9 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %10 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %10, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly, i64, i64, i64) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 5
  %9 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %9 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %10 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %10 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %11 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %11, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly, i64, i64, i64, i64) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %9 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %9, i64 0, i32 5
  %10 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %10 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %11 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %11 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %12 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %12, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i16* nocapture readonly, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp32 = icmp sgt i64 %3, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %2, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %1, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %3
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %10 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %10, i64 0, i32 5
  %11 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %11 to double
  %arrayidx = getelementptr inbounds i16, i16* %4, i64 %indvars.iv
  %12 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %12 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv35) #23
  %13 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %13, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}

; Function Attrs: nounwind uwtable
define %struct.out.normalization_fxp @normalization_fxp_cloned.1_cloned_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* nocapture readonly %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y, i64 %dim_z) #6 {
entry:
  %cmp32 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp32, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %cmp329 = icmp sgt i64 %nSamples, 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup4, %for.cond1.preheader.lr.ph
  %indvars.iv35 = phi i64 [ 0, %for.cond1.preheader.lr.ph ], [ %indvars.iv.next36, %for.cond.cleanup4 ]
  br i1 %cmp329, label %for.body5, label %for.cond.cleanup4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup4, %entry
  %returnStruct = insertvalue %struct.out.normalization_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.normalization_fxp %returnStruct

for.cond.cleanup4:                                ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, %soundSrcsSize
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond1.preheader

for.body5:                                        ; preds = %for.body5, %for.cond1.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body5 ], [ 0, %for.cond1.preheader ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %amp = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 5
  %1 = load float, float* %amp, align 4, !tbaa !14
  %conv7 = fpext float %1 to double
  %arrayidx = getelementptr inbounds i16, i16* %sampleTemp, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx, align 2, !tbaa !18
  %conv9 = sitofp i16 %2 to double
  %div = fdiv double %conv9, 3.276700e+04
  %mul = fmul double %div, %conv7
  %conv10 = fptrunc double %mul to float
  %call12 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv35) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call12, align 8, !tbaa !10
  %arrayidx14 = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 1, i64 %indvars.iv
  store float %conv10, float* %arrayidx14, align 4, !tbaa !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %nSamples
  br i1 %exitcond, label %for.cond.cleanup4, label %for.body5
}
<insert name of the function>haha
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2(%"class.std::vector.6"*, i64, i64, i64, i16*) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}

define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* %sampleTemp, i64 %idx_x) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned(%"class.std::vector.6"*, i64, i64, i64, i16*, i64) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}

define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* %sampleTemp, i64 %idx_x, i64 %idx_y) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i16*, i64, i64) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}

define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i16*, i64, i64, i64) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}

define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i16*, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}

define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i16*, i64, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}

define %struct.out.wrapperNormalization_fxp @wrapperNormalization_fxp_cloned.2_cloned_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i16* %sampleTemp, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y, i64 %dim_z) {
entry:
  ret %struct.out.wrapperNormalization_fxp undef
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3(%"class.std::vector.6"* in out, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %4 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %4, i64 0, i32 3
  %5 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %6 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %6, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %7 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %7, i64 0, i32 2
  %8 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %5, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %8)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %5 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %5, i64 0, i32 3
  %6 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %7 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %7, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 2
  %9 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %6, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %9)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %6 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %6, i64 0, i32 3
  %7 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %9 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %9, i64 0, i32 2
  %10 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %7, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %10)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %7 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %7, i64 0, i32 3
  %8 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %9 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %9, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %10 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %10, i64 0, i32 2
  %11 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %8, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %11)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 3
  %9 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %10 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %10, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %11 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %11, i64 0, i32 2
  %12 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %9, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %12)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out, i64, i64, i64, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp16 = icmp sgt i64 %3, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %2 to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %1, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %9 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %9, i64 0, i32 3
  %10 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %11 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %11, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %12 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %12, i64 0, i32 2
  %13 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %10, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %13)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %3
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %struct.out.encoder_fxp @encoder_fxp_cloned.3_cloned_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in out %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y, i64 %dim_z) #6 {
entry:
  %cmp16 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp16, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %conv4 = trunc i64 %nSamples to i32
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %returnStruct = insertvalue %struct.out.encoder_fxp undef, i64 %bytes_soundSrcs, 0
  ret %struct.out.encoder_fxp %returnStruct

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BEncoder = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 3
  %1 = load %class.CAmbisonicEncoderDist*, %class.CAmbisonicEncoderDist** %BEncoder, align 8, !tbaa !14
  %call3 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %2 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call3, align 8, !tbaa !10
  %arraydecay = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %2, i64 0, i32 1, i64 0
  %call6 = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %3 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call6, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %3, i64 0, i32 2
  %4 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !18
  tail call void @_ZN21CAmbisonicEncoderDist7ProcessEPfjP8CBFormat(%class.CAmbisonicEncoderDist* %1, float* nonnull %arraydecay, i32 %conv4, %class.CBFormat* %4)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4(%"class.std::vector.6"*, i64, i64, i64) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}

define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned(%"class.std::vector.6"*, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}

define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}

define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}

define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}

define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}
<insert name of the function>haha
define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"*, i64, i64, i64, i64, i64, i64, i64, i64) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}

define %struct.out.wrapperEncoder_fxp @wrapperEncoder_fxp_cloned.4_cloned_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, i64 %nSamples, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y, i64 %dim_z) {
entry:
  ret %struct.out.wrapperEncoder_fxp undef
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %5 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %5, i64 0, i32 2
  %6 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %6)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %6 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %6, i64 0, i32 2
  %7 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %7)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %7 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %7, i64 0, i32 2
  %8 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %8)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %8 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %8, i64 0, i32 2
  %9 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %9)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %9 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %9, i64 0, i32 2
  %10 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %10)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in, i64, %class.CBFormat* in out, i64, i64, i64, i64, i64, i64, i64) #6 {
entry:
  %cmp9 = icmp sgt i64 %4, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %0, i64 %indvars.iv) #23
  %10 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %10, i64 0, i32 2
  %11 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %2, %class.CBFormat* dereferenceable(64) %11)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %4
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind uwtable
define %emptyStruct @sumBF_fxp_cloned.5_cloned_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* in %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* in out %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y, i64 %dim_z) #6 {
entry:
  %cmp9 = icmp sgt i64 %soundSrcsSize, 0
  br i1 %cmp9, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret %emptyStruct undef

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %call = tail call dereferenceable(8) %"class.ILLIXR_AUDIO::Sound"** @_ZNSt6vectorIPN12ILLIXR_AUDIO5SoundESaIS2_EEixEm(%"class.std::vector.6"* %soundSrcs, i64 %indvars.iv) #23
  %0 = load %"class.ILLIXR_AUDIO::Sound"*, %"class.ILLIXR_AUDIO::Sound"** %call, align 8, !tbaa !10
  %BFormat = getelementptr inbounds %"class.ILLIXR_AUDIO::Sound", %"class.ILLIXR_AUDIO::Sound"* %0, i64 0, i32 2
  %1 = load %class.CBFormat*, %class.CBFormat** %BFormat, align 8, !tbaa !14
  %call2 = tail call dereferenceable(64) %class.CBFormat* @_ZN8CBFormatpLERKS_(%class.CBFormat* %sumBF, %class.CBFormat* dereferenceable(64) %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %soundSrcsSize
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}
<insert name of the function>haha
define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6(%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64) {
entry:
  ret %emptyStruct.33 undef
}

define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x) {
entry:
  ret %emptyStruct.33 undef
}
<insert name of the function>haha
define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned(%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64, i64) {
entry:
  ret %emptyStruct.33 undef
}

define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y) {
entry:
  ret %emptyStruct.33 undef
}
<insert name of the function>haha
define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned(%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64, i64, i64) {
entry:
  ret %emptyStruct.33 undef
}

define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z) {
entry:
  ret %emptyStruct.33 undef
}
<insert name of the function>haha
define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned(%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64, i64, i64, i64) {
entry:
  ret %emptyStruct.33 undef
}

define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x) {
entry:
  ret %emptyStruct.33 undef
}
<insert name of the function>haha
define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned_cloned(%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64, i64, i64, i64, i64) {
entry:
  ret %emptyStruct.33 undef
}

define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y) {
entry:
  ret %emptyStruct.33 undef
}
<insert name of the function>haha
define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"*, i64, %class.CBFormat*, i64, i64, i64, i64, i64, i64, i64) {
entry:
  ret %emptyStruct.33 undef
}

define %emptyStruct.33 @wrapperSumBF_fxp_cloned.6_cloned_cloned_cloned_cloned_cloned_cloned(%"class.std::vector.6"* %soundSrcs, i64 %bytes_soundSrcs, %class.CBFormat* %sumBF, i64 %bytes_sumBF, i64 %soundSrcsSize, i64 %idx_x, i64 %idx_y, i64 %idx_z, i64 %dim_x, i64 %dim_y, i64 %dim_z) {
entry:
  ret %emptyStruct.33 undef
}
/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/bin/clang -Isrc/ -I/include -I../include -I/include -ffast-math -O1 -fno-lax-vector-conversions -fno-vectorize -fno-slp-vectorize -I/software/cuda-9.1/include/CL/ -I/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/test/benchmarks/include -emit-llvm -S -o build/seq/AmbisonicCommons.ll src//AmbisonicCommons.cpp
/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/bin/llvm-link build/seq/audioEncoding-seq.host.ll build/seq/AmbisonicCommons.ll /shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/tools/hpvm/projects/hpvm-rt/hpvm-rt.bc -S -o build/seq/audioEncoding-seq.linked.ll
/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/build/bin/clang++ -O1 `pkg-config opencv --libs` -lm -lpthread -lrt -lOpenCL -L/software/cuda-9.1/lib64 build/seq/audioEncoding-seq.linked.ll -o audioEncoding-seq
[01;32myingj4@acadia[00m:[01;34m/shared/workspace/yingj4/HPVM/hpvm-release/hpvm/test/benchmarks/audioEncodingNoPara[00m$ exitt[K
exit

Script done on Wed 30 Sep 2020 02:00:46 PM CDT
